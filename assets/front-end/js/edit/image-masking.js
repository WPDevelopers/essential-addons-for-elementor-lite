/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/edit/image-masking.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/edit/image-masking.js":
/*!**************************************!*\
  !*** ./src/js/edit/image-masking.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var ImageMaskingHandler = function ImageMaskingHandler($scope, $) {\n  // Global storage for animation instances to prevent duplicates\n  window.eaelImageMaskingAnimations = window.eaelImageMaskingAnimations || {};\n  function get_clip_path(shape) {\n    var shapes = {\n      'bavel': 'polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%)',\n      'rabbet': 'polygon(0% 15%, 15% 15%, 15% 0%, 85% 0%, 85% 15%, 100% 15%, 100% 85%, 85% 85%, 85% 100%, 15% 100%, 15% 85%, 0% 85%)',\n      'chevron-left': 'polygon(100% 0%, 75% 50%, 100% 100%, 25% 100%, 0% 50%, 25% 0%)',\n      'chevron-right': 'polygon(75% 0%, 100% 50%, 75% 100%, 0% 100%, 25% 50%, 0% 0%)',\n      'star': 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\n    };\n    return shapes[shape] || '';\n  }\n\n  // Function to clean up existing animations for an element\n  function cleanupExistingAnimations(elementId) {\n    // Check if GSAP is available before attempting cleanup\n    if (typeof gsap === 'undefined') {\n      return;\n    }\n    if (window.eaelImageMaskingAnimations[elementId]) {\n      var existingAnimation = window.eaelImageMaskingAnimations[elementId];\n\n      // Kill existing GSAP timeline\n      if (existingAnimation.timeline) {\n        existingAnimation.timeline.kill();\n      }\n\n      // Remove animation reference\n      delete window.eaelImageMaskingAnimations[elementId];\n    }\n\n    // Also clean up any orphaned GSAP animations on the element\n    var element = $(\".elementor-element-\".concat(elementId));\n    if (element.length) {\n      gsap.killTweensOf(element.find('.eael-clip-path'));\n      gsap.killTweensOf(element.find('.clip-path'));\n    }\n  }\n  function renderImageMasking(model) {\n    var _model$attributes, _model$attributes2;\n    var settings = model === null || model === void 0 || (_model$attributes = model.attributes) === null || _model$attributes === void 0 || (_model$attributes = _model$attributes.settings) === null || _model$attributes === void 0 ? void 0 : _model$attributes.attributes;\n    var elementId = model === null || model === void 0 || (_model$attributes2 = model.attributes) === null || _model$attributes2 === void 0 ? void 0 : _model$attributes2.id,\n      element = $(\".elementor-element-\".concat(elementId));\n    var styleId = 'eael-image-masking-' + elementId;\n    $scope = element;\n\n    // Clean up existing animations before creating new ones\n    cleanupExistingAnimations(elementId);\n\n    // Remove existing style if present\n    $('#' + styleId).remove();\n    if ('yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_enable_image_masking)) {\n      var style = '';\n      if ('clip' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_type)) {\n        var clipPath = '';\n        if ('yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_enable_custom_clip_path)) {\n          clipPath = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_custom_clip_path;\n          clipPath = clipPath.replace('clip-path: ', '');\n        } else {\n          clipPath = get_clip_path(settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_clip_path);\n        }\n        if (clipPath) {\n          style += '.elementor-element-' + elementId + ' img {clip-path: ' + clipPath + ';}';\n        }\n        if ('yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_hover_effect)) {\n          var hoverClipPath = '';\n          if ('yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_enable_custom_clip_path_hover)) {\n            hoverClipPath = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_custom_clip_path_hover;\n            hoverClipPath = hoverClipPath.replace('clip-path: ', '');\n          } else {\n            hoverClipPath = get_clip_path(settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_clip_path_hover);\n          }\n          if (hoverClipPath) {\n            var hoverSelector = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_hover_selector;\n            if (hoverSelector) {\n              hoverSelector = ' ' + hoverSelector.trim();\n            }\n            style += '.elementor-element-' + elementId + hoverSelector + ':hover img {clip-path: ' + hoverClipPath + ';}';\n          }\n        }\n      } else if ('image' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_type)) {\n        var image = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_image;\n        if (image !== null && image !== void 0 && image.url) {\n          style += '.elementor-element-' + elementId + ' img {mask-image: url(' + image.url + '); -webkit-mask-image: url(' + image.url + ');}';\n        }\n        if ('yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_hover_effect)) {\n          var hoverImage = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_image_hover;\n          if (hoverImage !== null && hoverImage !== void 0 && hoverImage.url) {\n            var _hover_selector = settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_hover_selector;\n            if (_hover_selector) {\n              _hover_selector = ' ' + _hover_selector.trim();\n            }\n          }\n          style += '.elementor-element-' + elementId + hover_selector + ':hover img {mask-image: url(' + hoverImage.url + '); -webkit-mask-image: url(' + hoverImage.url + ');}';\n        }\n      } else if ('morphing' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_masking_type)) {\n        var morphingType = settings === null || settings === void 0 ? void 0 : settings.eael_morphing_type;\n        var $images = $scope.find('img'); // Use $scope like frontend for proper container support\n\n        if (settings !== null && settings !== void 0 && settings.eael_image_morphing_exclude_selectors) {\n          $images = $images.not(settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_exclude_selectors);\n        }\n        if ('clip-path' === morphingType) {\n          var _settings$eael_image_, _settings$eael_image_3;\n          var clipPaths = settings === null || settings === void 0 ? void 0 : settings.eael_clip_paths;\n          var paths = [];\n          clipPaths.forEach(function (clipPath) {\n            var _clipPath$attributes;\n            paths.push(clipPath === null || clipPath === void 0 || (_clipPath$attributes = clipPath.attributes) === null || _clipPath$attributes === void 0 ? void 0 : _clipPath$attributes.eael_clip_path.replace('clip-path: ', '').replace(';', '').replace('\\n', ''));\n          });\n          var animationData = {\n            polygonShapes: paths\n          };\n          if (settings !== null && settings !== void 0 && (_settings$eael_image_ = settings.eael_image_morphing_duration) !== null && _settings$eael_image_ !== void 0 && _settings$eael_image_.size) {\n            var _settings$eael_image_2;\n            animationData.duration = settings === null || settings === void 0 || (_settings$eael_image_2 = settings.eael_image_morphing_duration) === null || _settings$eael_image_2 === void 0 ? void 0 : _settings$eael_image_2.size;\n          }\n          if (settings !== null && settings !== void 0 && settings.eael_image_morphing_loop) {\n            animationData.loop = 'yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_loop);\n          }\n          if (settings !== null && settings !== void 0 && settings.eael_image_morphing_ease) {\n            animationData.ease = settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_ease;\n          }\n          if (settings !== null && settings !== void 0 && settings.eael_image_morphing_rotation) {\n            animationData.rotation = 'yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_rotation);\n          }\n          if (settings !== null && settings !== void 0 && (_settings$eael_image_3 = settings.eael_image_morphing_rotation_speed) !== null && _settings$eael_image_3 !== void 0 && _settings$eael_image_3.size) {\n            var _settings$eael_image_4;\n            animationData.rotationSpeed = settings === null || settings === void 0 || (_settings$eael_image_4 = settings.eael_image_morphing_rotation_speed) === null || _settings$eael_image_4 === void 0 ? void 0 : _settings$eael_image_4.size;\n          }\n          if (animationData && typeof PolygonMorphingAnimation !== 'undefined' && $images.length > 0) {\n            // Create animation instance for each image individually\n            $images.each(function (_, imgElement) {\n              new PolygonMorphingAnimation($(imgElement), animationData);\n            });\n          }\n        } else if ('svg' === (settings === null || settings === void 0 ? void 0 : settings.eael_morphing_type)) {\n          var _settings$eael_image_5;\n          // Check if animation already exists for this element - prevent duplicates early\n          if (window.eaelImageMaskingAnimations[elementId]) {\n            return; // Animation already running, prevent duplicate\n          }\n\n          // Mark element as being processed to prevent race conditions\n          window.eaelImageMaskingAnimations[elementId] = {\n            timeline: null,\n            type: 'svg-morphing',\n            processing: true\n          };\n          var svgPaths = settings === null || settings === void 0 ? void 0 : settings.eael_svg_paths;\n          if (!svgPaths || !svgPaths.length) {\n            console.warn('EAEL Image Masking: No SVG paths found for morphing');\n            return;\n          }\n          var svg_html_wrapper = $('#eael-svg-items-' + elementId);\n          var duration = (settings === null || settings === void 0 || (_settings$eael_image_5 = settings.eael_image_morphing_duration) === null || _settings$eael_image_5 === void 0 ? void 0 : _settings$eael_image_5.size) || 6;\n          var loop = 'yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_loop);\n\n          // Process SVG paths asynchronously\n          var svgPromises = [];\n          var svgContents = [];\n          svgPaths.forEach(function (svgPath, index) {\n            var _svgPath$attributes, _svgPath$attributes4;\n            if ('code' === (svgPath === null || svgPath === void 0 || (_svgPath$attributes = svgPath.attributes) === null || _svgPath$attributes === void 0 ? void 0 : _svgPath$attributes.eael_svg_file_type)) {\n              var _svgPath$attributes2, _svgPath$attributes3;\n              // Handle inline SVG code\n              console.log('svgPath?.attributes?.eael_svg_code', svgPath === null || svgPath === void 0 || (_svgPath$attributes2 = svgPath.attributes) === null || _svgPath$attributes2 === void 0 ? void 0 : _svgPath$attributes2.eael_svg_code);\n              svgContents[index] = DOMPurify.sanitize(svgPath === null || svgPath === void 0 || (_svgPath$attributes3 = svgPath.attributes) === null || _svgPath$attributes3 === void 0 ? void 0 : _svgPath$attributes3.eael_svg_code);\n              svgPromises.push(Promise.resolve());\n            } else if ('file' === (svgPath === null || svgPath === void 0 || (_svgPath$attributes4 = svgPath.attributes) === null || _svgPath$attributes4 === void 0 ? void 0 : _svgPath$attributes4.eael_svg_file_type)) {\n              var _svgPath$attributes5;\n              // Handle SVG file URL - check if URL exists\n              var svgFileUrl = svgPath === null || svgPath === void 0 || (_svgPath$attributes5 = svgPath.attributes) === null || _svgPath$attributes5 === void 0 || (_svgPath$attributes5 = _svgPath$attributes5.eael_svg_file) === null || _svgPath$attributes5 === void 0 ? void 0 : _svgPath$attributes5.url;\n              if (!svgFileUrl) {\n                console.warn('EAEL Image Masking: SVG file URL not found for path at index:', index);\n                svgContents[index] = '';\n                svgPromises.push(Promise.resolve());\n                return;\n              }\n\n              // Fetch SVG file content\n              var fetchPromise = fetch(svgFileUrl).then(function (response) {\n                if (!response.ok) {\n                  throw new Error(\"HTTP error! status: \".concat(response.status));\n                }\n                return response.text();\n              }).then(function (data) {\n                svgContents[index] = DOMPurify.sanitize(data);\n              })[\"catch\"](function (error) {\n                console.error('EAEL Image Masking: Error fetching SVG file:', error);\n                svgContents[index] = '';\n              });\n              svgPromises.push(fetchPromise);\n            }\n          });\n\n          // Wait for all SVG content to be loaded before proceeding\n          Promise.all(svgPromises).then(function () {\n            // Build the complete SVG HTML\n            var svg_html = '<div id=\"eael-svg-items-' + elementId + '\" style=\"display: none;\">';\n            svgContents.forEach(function (content) {\n              if (content) {\n                svg_html += content;\n              }\n            });\n            svg_html += '</div>';\n            if (svg_html_wrapper.length > 0) {\n              svg_html_wrapper.remove();\n            }\n\n            // Clean up any existing SVG masking elements to prevent accumulation\n            $scope.find('.eael-image-masking-container').each(function () {\n              var $container = $(this);\n              var $img = $container.find('img');\n              var $svg = $container.find('svg');\n              if ($img.length && $svg.length) {\n                // Restore original image visibility and remove SVG\n                $img.css('visibility', 'visible');\n                $svg.remove();\n                // Unwrap the container if it only contains the image\n                if ($container.children().length === 1) {\n                  $img.unwrap();\n                }\n              }\n            });\n            element.append(svg_html);\n            var svg_items = $('#eael-svg-items-' + elementId).find('svg');\n            if (!svg_items.length) {\n              console.warn('EAEL Image Masking: No SVG items found after loading');\n              return;\n            }\n            var viewBox = svg_items.first().attr('viewBox');\n            var defaultPath = svg_items.first().find('path').first().attr('d');\n            var transform = svg_items.first().find('path').first().attr('transform') || \"\";\n            $images.each(function (index, image) {\n              image = $(image);\n              var image_src = image.attr('src');\n              var uniqueId = elementId + '-' + index;\n\n              // Wrap image in container for proper positioning\n              if (!image.parent().hasClass('eael-image-masking-container')) {\n                image.wrap('<div class=\"eael-image-masking-container\" style=\"position: relative; display: inline-block; overflow: hidden;\"></div>');\n              }\n\n              // Hide original image and add SVG\n              image.css('visibility', 'hidden');\n              image.after(createClippedSVG(image_src, uniqueId, viewBox, defaultPath, image[0], transform));\n            });\n\n            // Check if GSAP and required plugins are available\n            if (typeof gsap === 'undefined') {\n              console.warn('EAEL Image Masking: GSAP is not available for morphing animation');\n              return;\n            }\n\n            // Check if morphSVG plugin is available\n            if (typeof gsap.plugins === 'undefined' || typeof gsap.plugins.morphSVG === 'undefined') {\n              console.warn('EAEL Image Masking: GSAP morphSVG plugin is not available for animation');\n              return;\n            }\n            var morphing = gsap.timeline({\n              repeat: loop ? -1 : 0,\n              yoyo: false,\n              repeatDelay: 0.001,\n              onComplete: function onComplete() {\n                // Clean up reference when animation completes (if not infinite)\n                if (!loop) {\n                  delete window.eaelImageMaskingAnimations[elementId];\n                }\n              }\n            });\n\n            // Update animation reference with actual timeline\n            window.eaelImageMaskingAnimations[elementId] = {\n              timeline: morphing,\n              type: 'svg-morphing',\n              processing: false\n            };\n            svg_items.first().appendTo(svg_items.parent());\n            svg_items = $('#eael-svg-items-' + elementId).find('svg');\n\n            // Start animation immediately like frontend - no delays\n            svg_items.each(function (index, element) {\n              var $svg = $(element);\n              var $path = $svg.find('path').first();\n\n              // Check if path element exists\n              if ($path.length === 0) {\n                console.warn('EAEL Image Masking: path element not found in SVG at index:', index);\n                return; // Skip this iteration\n              }\n              var transform = $path.attr('transform') || \"translate(0,0)\";\n              var clipPath = $scope.find('.clip-path'); // Use $scope for proper container support\n\n              if (clipPath.length === 0) {\n                console.warn('EAEL Image Masking: No clip-path elements found for animation');\n                return;\n              }\n\n              // Calculate duration per shape for smooth transitions\n              var totalDuration = duration || 6;\n              var durationPerShape = totalDuration / svg_items.length;\n\n              // Start first animation immediately, others at calculated intervals\n              var startTime = index * durationPerShape;\n              morphing.to(clipPath, {\n                morphSVG: {\n                  shape: $path[0]\n                },\n                duration: durationPerShape,\n                ease: (settings === null || settings === void 0 ? void 0 : settings.eael_image_morphing_ease) || \"sine.inOut\",\n                onStart: function onStart() {\n                  clipPath.attr('transform', transform);\n                }\n              }, startTime);\n            });\n          })[\"catch\"](function (error) {\n            console.error('EAEL Image Masking: Error loading SVG content:', error);\n            // Clean up animation reference on error\n            delete window.eaelImageMaskingAnimations[elementId];\n          });\n        }\n      }\n      if (style) {\n        element.append('<style id=\"' + styleId + '\">' + style + '</style>');\n      }\n    }\n  }\n\n  // Check if polygon animation is enabled and get settings\n  function createClippedSVG(imageSrc, uniqueId, viewBox, pathD, originalImage, transform) {\n    if ($(\"#eael-morphing-svg-\".concat(uniqueId)).length) {\n      return;\n    }\n    var imgWidth = originalImage.offsetWidth || originalImage.naturalWidth;\n    var imgHeight = originalImage.offsetHeight || originalImage.naturalHeight;\n\n    // Parse viewBox to get the coordinate system dimensions\n    var viewBoxValues = viewBox.split(' ').map(Number);\n    var viewBoxWidth = viewBoxValues[2];\n    var viewBoxHeight = viewBoxValues[3];\n\n    // Handle transform attribute if provided\n    var transformAttr = transform ? \"transform=\\\"\".concat(transform, \"\\\"\") : '';\n    return \"\\n            <svg id=\\\"eael-morphing-svg-\".concat(uniqueId, \"\\\" viewBox=\\\"\").concat(viewBox, \"\\\" width=\\\"\").concat(imgWidth, \"\\\" height=\\\"\").concat(imgHeight, \"\\\" style=\\\"position: absolute; top: 0; left: 0; visibility: visible; display: block;\\\">\\n                <defs>\\n                    <clipPath id=\\\"clip-path-\").concat(uniqueId, \"\\\">\\n                        <path class=\\\"clip-path\\\" d=\\\"\").concat(pathD, \"\\\" \").concat(transformAttr, \"/>\\n                    </clipPath>\\n                </defs>\\n                <image x=\\\"0\\\" y=\\\"0\\\" width=\\\"\").concat(viewBoxWidth, \"\\\" height=\\\"\").concat(viewBoxHeight, \"\\\" clip-path=\\\"url(#clip-path-\").concat(uniqueId, \")\\\" href=\\\"\").concat(imageSrc, \"\\\" preserveAspectRatio=\\\"xMidYMid slice\\\"/>\\n            </svg>\\n        \");\n  }\n  function getImageMaskingSettingsVal(models) {\n    $.each(models, function (_, model) {\n      var _model$attributes3;\n      // Only process if image masking is enabled for this element\n      var settings = model === null || model === void 0 || (_model$attributes3 = model.attributes) === null || _model$attributes3 === void 0 || (_model$attributes3 = _model$attributes3.settings) === null || _model$attributes3 === void 0 ? void 0 : _model$attributes3.attributes;\n      if (settings && 'yes' === (settings === null || settings === void 0 ? void 0 : settings.eael_enable_image_masking)) {\n        renderImageMasking(model);\n      }\n      if (model.attributes.elType !== 'widget') {\n        getImageMaskingSettingsVal(model.attributes.elements.models);\n      }\n    });\n  }\n  getImageMaskingSettingsVal(window.elementor.elements.models);\n};\njQuery(window).on(\"elementor/frontend/init\", function () {\n  if (eael.elementStatusCheck('eaelImageMaskingEditor')) {\n    return false;\n  }\n  elementorFrontend.hooks.addAction(\"frontend/element_ready/widget\", ImageMaskingHandler);\n});\n\n//# sourceURL=webpack:///./src/js/edit/image-masking.js?");

/***/ })

/******/ });